name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag to deploy (leave empty for latest)'
        required: false
        default: 'latest'
      dry_run:
        description: 'Dry run (validate only, no deployment)'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: ebay-draftmaker-job
  REPOSITORY: cloud-run-source-deploy

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Validate inputs
      run: |
        echo "üéØ Deployment requested"
        echo "Environment: ${{ inputs.environment }}"
        echo "Image tag: ${{ inputs.image_tag || 'latest' }}"
        echo "Dry run: ${{ inputs.dry_run }}"
        
        if [[ "${{ inputs.environment }}" == "production" ]]; then
          echo "‚ö†Ô∏è Production deployment requested - requiring approval"
        fi
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Check if image exists
      run: |
        IMAGE_TAG="${{ inputs.image_tag || 'latest' }}"
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
        
        echo "Checking for image: ${IMAGE_URL}"
        
        if gcloud artifacts docker images describe ${IMAGE_URL} --quiet; then
          echo "‚úÖ Image found"
        else
          echo "‚ùå Image not found: ${IMAGE_URL}"
          exit 1
        fi
    
    - name: Validate Cloud Run job exists
      run: |
        if [[ "${{ inputs.environment }}" == "staging" ]]; then
          JOB_NAME="${{ env.SERVICE_NAME }}-staging"
        else
          JOB_NAME="${{ env.SERVICE_NAME }}"
        fi
        
        if gcloud run jobs describe ${JOB_NAME} --region=${{ env.REGION }} --quiet; then
          echo "‚úÖ Cloud Run job '${JOB_NAME}' exists"
        else
          echo "‚ùå Cloud Run job '${JOB_NAME}' not found"
          exit 1
        fi

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ inputs.dry_run == false }}
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment == 'production' && 
        format('https://console.cloud.google.com/run/detail/{0}/{1}', env.REGION, env.SERVICE_NAME) || 
        format('https://console.cloud.google.com/run/detail/{0}/{1}-staging', env.REGION, env.SERVICE_NAME) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Deploy to Cloud Run
      run: |
        IMAGE_TAG="${{ inputs.image_tag || 'latest' }}"
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
        
        if [[ "${{ inputs.environment }}" == "staging" ]]; then
          JOB_NAME="${{ env.SERVICE_NAME }}-staging"
          ENV_VARS="ENVIRONMENT=staging,LOG_LEVEL=DEBUG"
        else
          JOB_NAME="${{ env.SERVICE_NAME }}"
          ENV_VARS="ENVIRONMENT=production,LOG_LEVEL=INFO"
        fi
        
        echo "Deploying ${IMAGE_URL} to ${JOB_NAME}"
        
        gcloud run jobs update ${JOB_NAME} \
          --image=${IMAGE_URL} \
          --region=${{ env.REGION }} \
          --set-env-vars="${ENV_VARS}"
        
        echo "‚úÖ Deployment complete"
    
    - name: Run post-deployment test
      run: |
        if [[ "${{ inputs.environment }}" == "staging" ]]; then
          JOB_NAME="${{ env.SERVICE_NAME }}-staging"
        else
          JOB_NAME="${{ env.SERVICE_NAME }}"
        fi
        
        echo "Running test execution of ${JOB_NAME}..."
        
        # Note: This is optional - remove if you don't want automatic test run
        # gcloud run jobs execute ${JOB_NAME} --region=${{ env.REGION }} --wait
        
        echo "‚úÖ Post-deployment validation complete"
    
    - name: Create deployment record
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            task: 'deploy',
            auto_merge: false,
            required_contexts: [],
            environment: '${{ inputs.environment }}',
            description: 'Manual deployment via GitHub Actions',
            payload: {
              image_tag: '${{ inputs.image_tag || 'latest' }}',
              deployed_by: context.actor
            }
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: '${{ inputs.environment == 'production' && 
              format('https://console.cloud.google.com/run/detail/{0}/{1}', env.REGION, env.SERVICE_NAME) || 
              format('https://console.cloud.google.com/run/detail/{0}/{1}-staging', env.REGION, env.SERVICE_NAME) }}',
            description: 'Deployment completed successfully'
          });
