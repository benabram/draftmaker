name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Check PR title and description
  pr-check:
    name: PR Standards Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR title format
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          test
          chore
          perf
        requireScope: false
        subjectPattern: ^(?![A-Z]).+$
        subjectPatternError: |
          The subject "{subject}" found in the pull request title "{title}"
          didn't match the configured pattern. Please ensure that the subject
          doesn't start with an uppercase character.
    
    - name: Check PR size
      uses: codelytv/pr-size-labeler@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        xs_label: 'size/XS'
        xs_max_size: '10'
        s_label: 'size/S'
        s_max_size: '100'
        m_label: 'size/M'
        m_max_size: '500'
        l_label: 'size/L'
        l_max_size: '1000'
        xl_label: 'size/XL'
        fail_if_xl: false

  # Run quick tests
  quick-test:
    name: Quick Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Check code formatting
      run: |
        black --check --diff src/ tests/
    
    - name: Run linting
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short
    
    - name: Comment test results
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const pytest_output = fs.existsSync('pytest_output.txt') ? 
            fs.readFileSync('pytest_output.txt', 'utf8') : 'Tests completed';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Test Results\n\`\`\`\n${pytest_output}\n\`\`\``
          })

  # Check for secrets
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check --file requirements.txt --json > safety-report.json || true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: safety-report.json
